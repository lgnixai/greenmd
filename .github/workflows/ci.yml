name: CI

on:
 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.7.0
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Type check
      run: pnpm type-check
      
    - name: Lint
      run: pnpm lint
      
    - name: Build
      run: pnpm build
      
    - name: Test
      run: pnpm test

  pre-commit-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.7.0
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build packages in dependency order
      run: |
        echo "Building packages in dependency order..."
        pnpm build --filter=@dtinsight/molecule-types
        pnpm build --filter=@dtinsight/molecule-shared
        pnpm build --filter=@dtinsight/molecule-core-legacy
        pnpm build --filter=@dtinsight/molecule-core
        pnpm build --filter=@dtinsight/molecule-ui
        
    - name: Verify all builds pass
      run: |
        echo "Verifying build artifacts..."
        test -f packages/types/dist/index.d.ts || (echo "Types package not built properly" && exit 1)
        test -f packages/shared/dist/index.d.ts || (echo "Shared package not built properly" && exit 1)
        test -f packages/core-legacy/dist/index.d.ts || (echo "Core-legacy package not built properly" && exit 1)
        test -f packages/core/dist/index.d.ts || (echo "Core package not built properly" && exit 1)
        test -f packages/ui/dist/index.d.ts || (echo "UI package not built properly" && exit 1)
        echo "All packages built successfully!"
 